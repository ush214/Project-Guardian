rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Auth helper
    function isSignedIn() {
      return request.auth != null;
    }

    // Allowlist doc helper
    function allowlist(uid) {
      return get(/databases/$(database)/documents/system/allowlist/users/$(uid));
    }

    // Case-insensitive "admin" check that works in rules (no inline flags)
    function allowlistRoleIsAdmin() {
      return (
        (allowlist(request.auth.uid).data.role is string &&
         allowlist(request.auth.uid).data.role.matches('^[Aa][Dd][Mm][Ii][Nn]$')) ||
        (allowlist(request.auth.uid).data.Role is string &&
         allowlist(request.auth.uid).data.Role.matches('^[Aa][Dd][Mm][Ii][Nn]$')) ||
        (allowlist(request.auth.uid).data.ROLE is string &&
         allowlist(request.auth.uid).data.ROLE.matches('^[Aa][Dd][Mm][Ii][Nn]$'))
      );
    }

    // Single definitive admin check
    function isAdmin() {
      return isSignedIn() && (
        // A) Custom auth claim (recommended in production)
        request.auth.token.admin == true
        ||
        // B) Allowlist-based admin (boolean or string)
        (allowlist(request.auth.uid).exists() && (
          allowlist(request.auth.uid).data.admin == true ||
          allowlistRoleIsAdmin()
        ))
      );
    }

    // Optional: allow a user to read their own allowlist doc
    match /system/allowlist/users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow write: if false; // mutate via server/Admin only
    }

    // Admin-only area (used by Task Dashboard):
    // artifacts/{app}/private/admin/** e.g. artifacts/guardian/private/admin/tasks
    match /artifacts/{app}/private/admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // Public area (read-only by default). Adjust write as needed.
    match /artifacts/{app}/public/{document=**} {
      allow read: if true;
      allow write: if isAdmin(); // tighten or expand if you have contributor roles
    }

    // NOTE: Avoid any global "allow read: if true" catch-alls; they would bypass the admin gate above.
  }
}